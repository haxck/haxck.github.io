{"meta":{"title":"Haxck's Blog","subtitle":null,"description":null,"author":"Haxck","url":"https://haxck.com","root":"/"},"pages":[],"posts":[{"title":"lone-term plan","slug":"lone-term-plan","date":"2018-08-02T11:20:22.000Z","updated":"2022-12-30T07:42:01.173Z","comments":true,"path":"2018/08/02/lone-term-plan/","link":"","permalink":"https://haxck.com/2018/08/02/lone-term-plan/","excerpt":"","text":"日常生活中，我们通过『行动』来达成『目标』，达成的『目标』又间接地成为下次『行动』的基础。这一过程的循环构成了我们每个人的一生。换言之，你做过的那些事构成了现在的你。 那同样是做事，有的人能够达到金字塔顶端，而有的人却只能在原地打转呢？这就是本文所要去探讨的问题。 研究人员找来数十名儿童，让他们每个人单独呆在一个只有一张桌子和一把椅子的小房间里，桌子上的托盘里有这些儿童爱吃的东西——棉花糖、曲奇或是饼干棒。研究人员告诉他们可以马上吃掉棉花糖，或者等研究人员回来时再吃还可以再得到一颗棉花糖做为奖励。他们还可以按响桌子上的铃，研究人员听到铃声会马上返回。 对这些孩子们来说，实验的过程颇为难熬。有的孩子为了不去看那诱惑人的棉花糖而捂住眼睛或是背转身体，还有一些孩子开始做一些小动作——踢桌子，拉自己的辫子，有的甚至用手去打棉花糖。结果，大多数的孩子坚持不到三分钟就放弃了。“一些孩子甚至没有按铃就直接把糖吃掉了，另一些则盯着桌上的棉花糖，半分钟后按了铃”。大约三分之一的孩子成功延迟了自己对棉花糖的欲望，他们等到研究人员回来兑现了奖励，差不多有15分钟的时间。 从上述实验可以看出：人总是趋向于短期的利益，即使明知在未来有更大利益的情况下。这是人性所决定的。而宏伟的目标往往不是一蹴而就，需要持续不断地，付出极大地努力才有机会达成。过度关注单件事的成否，无法将过去的点连成线，是症结所在。 基于此，我们需要一个凸透镜，将分散的太阳光聚拢在一个点上，点燃梦想。『长期计划』正是将所有事件聚集起来的凸透镜。 怎么做一份『长期计划』？ 首先，理清你要到达地方。 现在，试着想象一下未来五年、十年乃至更长的时间，你最想成为什么样的人。不用太过理性，浪漫主义些，第一个出现的画面是什么？记录下来，这就是你要为之努力的目标。 这一步看起来很简单，实际上却是最难得。有时你觉得想明白了，其实只是个感觉。有时又很难去跳出现在的处境，容易代入现在的职业身份。总之，多花点时间在这儿。 其次，分解你的目标。 分解是将目标拆分为一个个具体的（Specific）、可衡量的（Measurable）、可达到的（Attainable）、具有相关性(Relevant)、明确的截止期限（Time-bound）的小任务。 举个例子：我想成为一名优秀的程序员。那什么是优秀的程序员呢？有良好的程序设计能力、专业的软件开发素养。 什么才是良好的程序设计能力？掌握常用的算法与数据结构、理解计算机科学的核心概念。常用的算法是什么？快速排序、归并排序 … 。这么一直分解下去。 行动 现在你有了一大堆的任务。加入到日程中，开始去做吧。记住：在单个事件中，行动是影响结果唯一的因素。 反馈 我们不可以一次就把计划做的完美无缺，通过执行获得反馈，及时调整计划。举个例子：三天把算法吃透，你发现自己每天只能理解一个算法。这时你就该调整你的计划，给这项任务更多的时间。 最后，愿我们能成为更好的自己。","categories":[],"tags":[]},{"title":"跨域请求","slug":"cors","date":"2018-05-20T16:00:53.000Z","updated":"2022-12-30T07:42:01.173Z","comments":true,"path":"2018/05/20/cors/","link":"","permalink":"https://haxck.com/2018/05/20/cors/","excerpt":"","text":"前言 最近遇到了跨域问题，来来回回折腾了两三个小时，总算理出点头绪。 什么是跨域？ 跨域指一个域名的网页去请求另一个域名的资源。但由于浏览器的同源策略，不能够直接去请求，只有在相同的域名下才可以。 要解决跨域请求，就得避免触发浏览器的同源策略。如果是API提供者，可以通过在服务器端设置header来允许非同一域下的请求。 2种解决方式 在多数情况下，我们一般是在调用第三方API，并不能直接去改动服务器，那该怎么解决？ 代理 代理是先在自己的服务端去请求API，再通过请求自己的服务器来获得数据，这样就避开了同源策略。 var express = require(&#x27;express&#x27;);var proxy = require(&#x27;http-proxy-middleware&#x27;);app.use(&quot;/api&quot;, proxy(&#123; target: &quot;http://api.org&quot;, changeOrigin: true&#125;)) JSONP JSONP 利用 script 标签的 src 进行跨域。什么意思？大家有没有发现，在HTML中，引用 CDN 的时候，不会有任何问题。jsonp就是利用这种方式。 构建一个 script 标签，把 json 的 URL 赋给 script 的 scr 属性。 在jQuery中，只需要在原有的ajax中指定 dataType:&quot;jsonp&quot; 即可。 $.ajax(&#123; url: url, dataType: &quot;jsonp&quot;, jsonp:&quot;callback&quot;, success:function(data)&#123; console.log(data); &#125;&#125;) 参考资料 HTTP访问控制（CORS） jsonp详解","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://haxck.com/tags/JavaScript/"}]},{"title":"上手 Vuepress","slug":"vuepress","date":"2018-04-19T19:50:41.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2018/04/19/vuepress/","link":"","permalink":"https://haxck.com/2018/04/19/vuepress/","excerpt":"","text":"什么是 Vuepress Vuepress 是一个基于 vue 的静态网页生成器，与 GATSBY 类似。比 Hexo 这类生成器要相对简单，稍加配置就可以做出带有 SEO 现代 web 应用。 具体可以去官网了解 由于vuepress是为了vue的文档而创建，使得它很默认的主题就是为了文档而设定的。你也可以自己写其它的主题。 接下来我们来快速地基于默认主题做一个静态站点。 安装 vuepress yarn global add vuepressnpm install vuepress -g 配置 在没有任何配置的情况下，只有最基本的 Markdown 解析。所有的配置信息都放在.vuepress/config.js中 基础配置： module.exports=&#123; title: &quot;网站标题&quot;, description: &quot;网站描述&quot; base: &quot;/&quot; //网站地址&#125; 添加侧边栏: themeCofig: &#123; Sidebar:[ &#123; Title: &quot;Name&quot;, Collapsable: false, Children:[ &quot;/&quot;,… ] &#125; ]&#125; 打包与部署 打包 vuepress build . 默认打包后的内容在 .vuepress/dist/ 目录下。也可以在配置中修改打包地址。 dest: &quot;dist&quot; 部署 # 导航到构建输出目录cd distgit initgit add -Agit commit -m &#x27;deploy&#x27;# 推到你仓库的的 gh-page 分支# 将 &lt;USERNAME&gt;/&lt;REPO&gt; 替换为你的信息git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages","categories":[],"tags":[]},{"title":"用JS学数据结构和算法之队列","slug":"queue","date":"2018-04-07T11:27:56.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2018/04/07/queue/","link":"","permalink":"https://haxck.com/2018/04/07/queue/","excerpt":"","text":"队列（queue）跟栈是一种相似的结构，只是采取的策略不同。队列是一组有序的，遵循FIFO（First In First Out，先进先出）的原则。新元素在队列的尾部，最先进来的会被最先移除。 队列一般的有的方法： enqueue：向队列尾部添加元素 dequeue：移除队列第一个元素，并返回被移除的元素。 front：返回第一个元素 isEmpty：队列是否为空 size：返回队列的元素个数 用Js来实现： function Queue()&#123; let items = []; this.enqueue = function(el)&#123; items.push(el); &#125; this.dequeue = function()&#123; return items.shift() &#125; this.front = function()&#123; return items[0]; &#125; this.isEmpty = function()&#123; return items.length == 0; &#125; this.size = function()&#123; return items.length; &#125;&#125; 有时候呢，我们还需要有一个特殊的通道，用来处理更紧急的任务。这个该怎么用队列实现呢？ function PriorityQueue() &#123; let items = []; function QueueElement(el, priority) &#123; this.el = el; this.priority = priority; &#125; this.enqueue = function (el, priority) &#123; let queueElement = new QueueElement(el, priority); if (items.length == 0) &#123; items.push(queueElement) &#125; else &#123; for (let i = 0; i &lt; items.length; i++) &#123; if (queueElement.priority &lt; items[i].priority) &#123; items.splice(i, 0, queueElement); break; &#125; &#125; &#125; this.print = function () &#123; for (let i = 0; i &lt; items.length; i++) &#123; console.log(`$&#123;items[i].el&#125; - $&#123;items[i].priority&#125;`); &#125; &#125; this.dequeue = function () &#123; return items.shift() &#125; this.front = function () &#123; return items[0]; &#125; this.isEmpty = function () &#123; return items.length == 0; &#125; this.size = function () &#123; return items.length; &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"用JS学数据结构和算法之栈","slug":"stack","date":"2018-04-02T11:27:56.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2018/04/02/stack/","link":"","permalink":"https://haxck.com/2018/04/02/stack/","excerpt":"","text":"栈（stack）是一种有序集合，遵循后进先出（LIFO）的原则。在栈里，新进来的数据在栈顶，旧数据被压在栈底。 栈一般有这么几个方法： Push ：进栈。添加栈顶元素。 pop：出栈。移除栈顶元素。 top：返回栈顶元素。 empty：堆栈是否为空。 size：栈中元素个数。 clear：清除所有元素。 用Js来实现： function stack()&#123; let item = []; this.push = function(el)&#123; item.push(el); &#125; // 移除栈顶的元素，同时返回被移除的元素 this.pop = function()&#123; return item.pop() &#125; this.top = function()&#123; return item[item.length - 1]; &#125; //判断栈内是否为空 this.empty = function()&#123; return item.length == 0; &#125; this.size = function()&#123; return item.length; &#125; this.clear = function()&#123; item = []; &#125;&#125;","categories":[],"tags":[]},{"title":"《程序员修炼之道》书摘","slug":"The-Pragmatic-Programmer-clip","date":"2018-03-31T21:19:25.000Z","updated":"2022-12-30T07:42:01.173Z","comments":true,"path":"2018/03/31/The-Pragmatic-Programmer-clip/","link":"","permalink":"https://haxck.com/2018/03/31/The-Pragmatic-Programmer-clip/","excerpt":"","text":"在某些方面，编程就像是绘画。你从空白的画布和某些基本原材料开始，通过知识、艺术和技艺的结合去确定用前者做些什么。你勾画出全景，绘制背景，然后填入各种细节。你不时后退一步，用批判的眼光观察你的作品。常常，你会扔掉画布，重新再来。 但艺术家们会告诉你，如果你不懂得应何时止步，所有的辛苦劳作就会遭到毁坏。如果你一层又一层、细节复细节地叠加，绘画就会迷失在绘制之中。 不要因为过度修饰和过于求精而毁损完好的程序。继续前进，让你的代码凭着自己的质量站立一会儿。它也许不完美，但不用担心：它不可能完美 你的知识和经验是你最重要的职业财富。 随着你的知识的价值降低，对你的公司或客户来说，你的价值也在降低。我们想要阻止这样的事情，决不让它发生。 我们喜欢把程序员所知道的关于计算技术和他们所工作的应用领域的全部事实、以及他们的所有经验视为他们的知识资产（Knowledge Portfolios）。管理知识资产与管理金融资产非常相似： 严肃的投资者定期投资——作为习惯。 多元化是长期成功的关键。 聪明的投资者在保守的投资和高风险、高回报的投资之间平衡他们的资产。 投资者设法低买高卖，以获取最大回报。 应周期性地重新评估和平衡资产。 要在职业生涯中获得成功，你必须运用同样的指导方针管理你的知识资产。 经营你的资产： 定期投资。就像金融投资一样，你必须定期为你的知识资产投资。即使投资量很小，习惯自身也和总量一样重要。在下一节中将列出一些示范目标。 多元化。你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特定技术的各种特性。但不要就此止步。计算技术的面貌变化很快——今天的热门技术明天就可能变得近乎无用（或至少是不再抢手）。你掌握的技术越多，你就越能更好地进行调整，赶上变化。 管理风险。从高风险、可能有高回报，到低风险、低回报，技术存在于这样一条谱带上。把你所有的金钱都投入可能突然崩盘的高风险股票并不是一个好主意；你也不应太保守，错过可能的机会。不要把你所有的技术鸡蛋放在一个篮子里。 低买高卖。在新兴的技术流行之前学习它可能就和找到被低估的股票一样困难，但所得到的就和那样的股票带来的收益一样。在Java刚出现时学习它可能有风险，但对于现在已步入该领域的顶尖行列的早期采用者，这样做得到了非常大的回报。 重新评估和平衡。这是一个非常动荡的行业。你上个月开始研究的热门技术现在也许已像石头一样冰冷。也许你需要重温你有一阵子没有使用的数据库技术。又或许，如果你之前试用过另一种语言，你就会更有可能获得那个新职位","categories":[],"tags":[{"name":"书","slug":"书","permalink":"https://haxck.com/tags/%E4%B9%A6/"}]},{"title":"快速打开 Windows 开机启动目录","slug":"startup","date":"2018-03-27T11:26:38.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2018/03/27/startup/","link":"","permalink":"https://haxck.com/2018/03/27/startup/","excerpt":"","text":"Win10里开始菜单中的启动没有了，找目录又太麻烦。告你个简单点儿的方法。在运行（Win + R）输入 shell:startup。","categories":[],"tags":[{"name":"技巧","slug":"技巧","permalink":"https://haxck.com/tags/%E6%8A%80%E5%B7%A7/"}]},{"title":"自动部署 hexo 博客","slug":"automatically-deploy-hexo-blog","date":"2018-03-06T15:10:16.000Z","updated":"2022-12-30T07:42:01.173Z","comments":true,"path":"2018/03/06/automatically-deploy-hexo-blog/","link":"","permalink":"https://haxck.com/2018/03/06/automatically-deploy-hexo-blog/","excerpt":"","text":"去年将博客搬到了 Github ，用的是 hexo 生成好的静态网页。此外还开了新分支来备份 hexo 源文件。每次写完文章后，hexo generate，hexo deploy 等一系列操作。 懒啊！！！ 不过，懒，可能是进步的唯一动力。查资料。 CI（持续集成）可以自动地处理测试、编译、部署。😜原来这种事大家都想的一样。 我用的 CI 是 CircleCI。每月有 1500 的免费构建时间，对于一个博客，够用了。使用 GitHub 账号登录，选择需要自动化的项目，根据提示创建相应的文件，一气呵成。 配置也相对简单，只需把平时的操作列举即可。唯一需要注意的是要有仓库的写权限。 至此，只需要将源码推到 GitHub ，CI 会自动地生成静态网页。","categories":[],"tags":[]},{"title":"代码编辑利器 VScode","slug":"using-vscode","date":"2018-01-28T18:02:09.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2018/01/28/using-vscode/","link":"","permalink":"https://haxck.com/2018/01/28/using-vscode/","excerpt":"","text":"前言 前几年在被问到“该用那款编辑器？”时还会有大量的候选，如今，如果还有人问，我想只能是 VScode 了。 即使你是喜欢“开箱即用”的人，不用配置不用折腾，也会发现其中的乐趣。 本文旨在说明一些 VScode 常用功能，帮助你了解这款编辑器以及提高你的编辑效率。 编辑 基本编辑（Basic Editing) Ctrl + Enter : 在下面新增一行并跳至该行 Ctrl + Shift + Enter : 在上面增加一行并跳至该行 Ctrl + ←/→ : 逐词移动 Ctrl + Shift + ←/→ 逐词选择 Ctrl + ↑/↓ 移动显示区域 Alt + ↑/↓ 移动该行 Shift + Alt + ↑/↓ 在上面或下面复制该行 Ctrl + Alt + ↑/↓ 多行编辑 查找 &amp; 替换（Finding &amp; Replacing） 查找 Ctrl + f 和替换 Ctrl + h 想必都很熟悉。在必要的时候，还可以 Alt + c 切换大小写敏感（Case-sensitive）或者使用正则表达式 Alt + r 跳转（Jumping） 跳转到文件 Ctrl + P 会列出当前打开的文件和最近打开过的文件，输入文件名可搜索当前目录文件，Enter跳转至该文件。→可连续打开文件 跳转到某行 Ctrl + g 能在当前文件中跳到指定行中，也可以在 Ctrl + p 匹配到文件后，继续输入 :Num 以跳转到更精确的位置 跳转到符号（Symbol） VSC 还支持符号间跳转，Ctrl + Shift + o 会显示出当前文件中的符号（函数名、变量名）。也可以在 Ctrl + p 中直接输入 @。 窗口 &amp; 并排编辑（Window &amp; Side by side editing） 使用 Ctrl + Shift + n 创建一个新窗口，当窗口内没有标签时，使用Ctrl + W关闭该窗口。 使用 Ctrl + N 在当前窗口创建一个新标签，Ctrl + W关闭当前标签，Ctrl + Shift + T恢复刚刚关闭的标签。Ctrl + tab 标签间切换 编辑代码时我们会需要参照另外一个文件，比如写 MarkDown 时在一侧显示预览，这时使用 Ctrl + \\ 可将一个窗口分为多个编辑区域， Ctrl + Num 在窗口间切换。在编辑 MarkDown 时使用 Ctrl + Shift + m 显示实时预览。 代码片段（Snippets） 代码片段可以将一大段代码起一个名字。使用时，直接输入代码片段的名字，即可替换成预先设置的内容。 在 VSC 中我们可以自己创建自己的代码片段，具体可参考 创建自己的代码片段 插件 我个人比较喜欢 VScode 的插件功能。除了众多的插件外，还有一个很贴心的功能。它在你需要的时候提示你可能需要某个插件。比如说你打开了 vue 文件，它会提示你安装一些代码高亮的插件，十分省心。 我安装的插件有： One Dark Pro （主题） Vetur （Vue代码高亮、格式化工具） indent-rainbow （缩进） Live Server (快速启动一个本地服务器) 结尾 好了，VScode 的功能远不只如此，如果你感兴趣可以去官网了解。最后，了解完别忘了实践！","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"https://haxck.com/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"双拼","slug":"uurufa","date":"2017-12-10T14:46:35.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2017/12/10/uurufa/","link":"","permalink":"https://haxck.com/2017/12/10/uurufa/","excerpt":"","text":"​闲来无事，想起 iOS 11 中新增了双拼，了解了解。 我们平时使用的拼音输入法通常是全拼，打一个字需要拼出所有的音。双拼也是拼音输入法，只不过是通过一个声母 + 一个韵母的方式，完成一个汉字的拼写。所以双拼自然地减少了击键次数，从而提高效率。 双拼既然是通过声母 + 韵母的方式，务必的会使键盘上的字母映射成对应的声母或韵母，这种替换方式就是双拼方案。一般的输入法都内置了几种不同的方案供用户选择。方案的选择即字母映射成对应的声母或韵母的对应规则。比较常用的方案如自然码、小鹤等等。此次在 iOS 11 中内置的是搜狗的方案，在随后的 11.3 的更新中又加入了拼音加加和微软的方案。 与复杂的五笔相比，双拼简单易学。对于经常打字的同学来说，能少敲一下是一下，是不是？ 使用了一段时间后的建议： 不要纠结某种方案。 多练习，习惯是很难改变的。 刚开始练习的时候，先别直接写文章，会影响到思路。建议先找几篇文章熟悉一段时间。 常用汉字韵母出现频率表","categories":[],"tags":[{"name":"效率","slug":"效率","permalink":"https://haxck.com/tags/%E6%95%88%E7%8E%87/"}]},{"title":"一个小程序的诞生","slug":"lite-program","date":"2017-11-22T11:37:46.000Z","updated":"2022-12-30T07:42:01.173Z","comments":true,"path":"2017/11/22/lite-program/","link":"","permalink":"https://haxck.com/2017/11/22/lite-program/","excerpt":"","text":"一个想法 凌晨2点钟，给所有 APP 都点了一遍后，还是一点睡意也没有，如无意外，我再一次失眠了。对于失眠，大多数是因为白天太闲造成的精力过剩，只要精力被消耗殆尽，就会乖乖入睡，百试百灵。然而也有一少部分人是因为胡思乱想造成的失眠，在脑海中数了一万只羊后，可能会因为数量太大而再数一遍。如果你正好是后一种，白噪音可能能救你一夜。 你说失眠也不是天天的事儿，不能为了一年才用一次的功能下载一 APP 吧？这不，小龙哥的微信小程序就是来解决这一类问题的。我在微信搜索中搜到了几个白噪音的小程序，还不错，只是这么多选项让本来只想快点入睡的我更加清醒，就不能简单点儿吗？ 简单到只有一个开关，然后闭眼就好。 想法有了，那就试试呗。 开工 播放音乐 &lt;audio poster = &quot;&#123;&#123;poster&#125;&#125;&quot; name = &quot;&#123;&#123;name&#125;&#125;&quot; author = &quot;&#123;&#123;author&#125;&#125;&quot; src = &quot;&#123;&#123;src&#125;&#125;&quot; id = &quot;myAudio&quot; loop&gt;&lt;/audio&gt; 控制 audioPlay: function () &#123; this.audioCtx.play()&#125;,audioPause: function () &#123; this.audioCtx.pause()&#125; 随机时间 var timer = parseInt(Math.random()* 2400000 + 1200000,10) Bug 按照上面的思路一番尝试，功能大致是好了，就是会遇到一点小问题，播放的时候会等着整个音频加载完毕后才可以播放。尤其我使用的音频又有20多兆，这个问题必须解决，才能上线。 说来也简单，只需将上面播放音频的API 换成 背景音频 API 就能解决这个问题 上线 至此，小程序就如想法一样，打开开关，睡觉吧。 原本想的名字也遵循简单的原则，可惜被使用了，最后又想了一个洋气点儿的，叫 NightMate 。 图标、名字等相关内容都填写好后，提交代码审核，等待通过后就算是大功告成了。","categories":[],"tags":[{"name":"产品","slug":"产品","permalink":"https://haxck.com/tags/%E4%BA%A7%E5%93%81/"}]},{"title":"在 Cisco 路由上使用 PPPoE 拨号","slug":"pppoe","date":"2017-07-13T16:17:09.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2017/07/13/pppoe/","link":"","permalink":"https://haxck.com/2017/07/13/pppoe/","excerpt":"","text":"int dialer 1 ip address negoriated encapsulation ppp ppp authentication pap callin ppp pap sent-username password ppp ipcp route default dialer pool 1 no shut int g0/1 no ip address pppoe enable pppoe-client dialer-pool-number 1 no shut","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://haxck.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"你要一直酷下去","slug":"always-cool","date":"2017-07-01T15:10:16.000Z","updated":"2022-12-30T07:42:01.173Z","comments":true,"path":"2017/07/01/always-cool/","link":"","permalink":"https://haxck.com/2017/07/01/always-cool/","excerpt":"","text":"这事儿你从年初一直念叨到现在，到昨天还是「前怕狼后怕虎」的状态，我觉得你还得一拖再拖。不过这事，我倒是希望你一直拖下去，毕竟这不是一拍大腿干完就撤的事，还是多想想好。 出来的效果比在图上看要好的多，白点儿使得狗尾巴草更加立体。不过在我看来，没什么好看不好看，就像是纹身店里的人说的那样，全凭个人喜好。你说之所以纹它，是希望能像它一样，不管在什么地方都可以活下来。 于我而言，「纹」这个行为要大过图案本身的意义，随着身不由己的事越来越多时，这种意义尤为明显。你要知道「有些鸟,笼子是关不住它的」，这是件非常酷的事儿。 愿你一直酷下去","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://haxck.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"博客落户 Github","slug":"welcome","date":"2017-06-14T16:22:38.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2017/06/14/welcome/","link":"","permalink":"https://haxck.com/2017/06/14/welcome/","excerpt":"","text":"把博客从服务器上迁移到 Github 上了。原因是服务器快到期了，没钱续费😭。之前服务器上还部署了 Echo ，下线后，就只剩下博客了。总觉得这么用服务器多少有点儿浪费，再加上最近也没更新过博客，更是如此。 这么看来，即便是花钱的服务器也不能让我提起劲开写。究其根本，无非是脑子里没货，没有可拿出来分享的，哪怕是错的、无稽地无病呻吟。 为了迫使我开始，我先把要写的文章标题列出来，时间长了，里面的内容老是空空如也，估计也过意不去吧。不过，谁知道呢。","categories":[],"tags":[]},{"title":"整牙日记","slug":"teeth","date":"2017-06-01T10:03:47.000Z","updated":"2022-12-30T07:42:01.177Z","comments":true,"path":"2017/06/01/teeth/","link":"","permalink":"https://haxck.com/2017/06/01/teeth/","excerpt":"","text":"[注意：你现在看到的是还未完成的内容] 从开始矫正牙齿到现在，从歪七扭八变到相对整齐，对牙齿的关注程度越来越敏感，在这个过程中，。尽管内容并不是记录整牙的过程，， 分牙","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://haxck.com/tags/JavaScript/"},{"name":"书","slug":"书","permalink":"https://haxck.com/tags/%E4%B9%A6/"},{"name":"技巧","slug":"技巧","permalink":"https://haxck.com/tags/%E6%8A%80%E5%B7%A7/"},{"name":"教程","slug":"教程","permalink":"https://haxck.com/tags/%E6%95%99%E7%A8%8B/"},{"name":"效率","slug":"效率","permalink":"https://haxck.com/tags/%E6%95%88%E7%8E%87/"},{"name":"产品","slug":"产品","permalink":"https://haxck.com/tags/%E4%BA%A7%E5%93%81/"},{"name":"笔记","slug":"笔记","permalink":"https://haxck.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"随笔","slug":"随笔","permalink":"https://haxck.com/tags/%E9%9A%8F%E7%AC%94/"}]}